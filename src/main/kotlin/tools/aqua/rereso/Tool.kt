// SPDX-FileCopyrightText: 2023-2025 The ReReSo Authors, see AUTHORS.md
//
// SPDX-License-Identifier: Apache-2.0

@file:OptIn(ExperimentalSerializationApi::class)

package tools.aqua.rereso

import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.Required
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import tools.aqua.rereso.util.NullifiedEmptyList
import tools.aqua.rereso.util.NullifiedEmptySet

/**
 * A ReReSo Tool information object. This should be serialized as a `rereso.yml` file accompanying a
 * tool image.
 *
 * @property metadata the generic ReReSo metadata for the tool.
 * @property license the license for the tool.
 * @property commands the commands provided by the tool.
 * @property container the name of the tool container file.
 */
@Serializable
data class Tool(
    val metadata: Metadata,
    val license: License,
    val commands: NullifiedEmptySet<ToolCommand>,
    val container: String
) {
  /** The tool format version. Must be [ReReSoSchemas.version] at the moment. */
  @Required @SerialName("rereso-tool-version") val reresoVersion: String = ReReSoSchemas.version
}

/**
 * A command for a [Tool]. This defines one mode of data transformation by the tool, i.e.,
 * transforming zero-to-n into zero-to-m outputs.
 *
 * @property name the name of the command. This can be, e.g., a command line "template".
 * @property inputFormats the data formats processed by the command. Can be empty for, e.g., a
 *   generator.
 * @property outputFormats the data formats generated by the command. Can be empty for, e.g., an
 *   analysis tool only writing to stdout.
 */
@Serializable
data class ToolCommand(
    val name: String,
    @SerialName("input-formats") val inputFormats: NullifiedEmptyList<DataFormat>,
    @SerialName("output-formats") val outputFormats: NullifiedEmptyList<DataFormat>
)
